# repair_project.py
# Script para reparar TODOS los problemas del proyecto

import os
import shutil

print("üîß REPARANDO EL PROYECTO COMPLETO...\n")

# 1. Crear analyzer/__init__.py
print("1Ô∏è‚É£ Creando analyzer/__init__.py...")
with open('analyzer/__init__.py', 'w', encoding='utf-8') as f:
    f.write('# Analyzer app initialization\n')
print("   ‚úÖ Archivo creado")

# 2. Hacer backup del settings.py actual
print("\n2Ô∏è‚É£ Haciendo backup de settings.py...")
if os.path.exists('config/settings.py'):
    shutil.copy('config/settings.py', 'config/settings_backup.py')
    print("   ‚úÖ Backup creado: config/settings_backup.py")

# 3. Crear un settings.py limpio
print("\n3Ô∏è‚É£ Creando settings.py limpio...")
settings_content = '''"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'analyzer',  # Nuestra app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
'''

with open('config/settings.py', 'w', encoding='utf-8') as f:
    f.write(settings_content)
print("   ‚úÖ settings.py creado correctamente")

# 4. Recrear todos los archivos principales con codificaci√≥n correcta
print("\n4Ô∏è‚É£ Recreando archivos principales...")

# analyzer/views.py simplificado
views_content = '''# analyzer/views.py

from django.shortcuts import render
from django.views import View
from django.http import JsonResponse
from .models import AnalysisHistory
from .utils.scraping import scrape_product_info
from .utils.ai_integration import generate_strategy
import json

class AffiliateStrategistView(View):
    """Vista principal para la herramienta de marketing de afiliados"""
    
    def get(self, request):
        """Muestra el formulario principal"""
        context = {
            'platforms': [
                ('instagram', 'Instagram'),
                ('tiktok', 'TikTok'),
                ('facebook', 'Facebook'),
                ('blog', 'Blog'),
            ]
        }
        return render(request, 'analyzer/index.html', context)
    
    def post(self, request):
        """Procesa el formulario y genera la estrategia"""
        try:
            # Recibir datos
            product_url = request.POST.get('product_url', '').strip()
            target_audience = request.POST.get('target_audience', '').strip()
            platform = request.POST.get('platform', '').strip()
            api_key = request.POST.get('api_key', '').strip()
            
            # Validar
            if not all([product_url, target_audience, platform, api_key]):
                return JsonResponse({
                    'success': False,
                    'error': 'Por favor completa todos los campos.'
                })
            
            # Web Scraping
            scraping_result = scrape_product_info(product_url)
            if not scraping_result['success']:
                return JsonResponse({
                    'success': False,
                    'error': scraping_result['error']
                })
            
            # Generar prompt
            product_data = scraping_result['data']
            prompt = self.build_prompt(product_data, target_audience, platform)
            
            # Llamar a IA
            ai_result = generate_strategy(prompt, api_key)
            if not ai_result['success']:
                return JsonResponse({
                    'success': False,
                    'error': ai_result['error']
                })
            
            # Guardar en historial
            AnalysisHistory.objects.create(
                product_url=product_url,
                target_audience=target_audience,
                platform=platform,
                product_title=product_data.get('title', ''),
                product_description=product_data.get('description', ''),
                product_price=product_data.get('price', ''),
                ai_response=ai_result['response'],
                success=True
            )
            
            return JsonResponse({
                'success': True,
                'response': ai_result['response'],
                'product_info': product_data
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            })
    
    def build_prompt(self, product_data, target_audience, platform):
        """Construye el prompt para la IA"""
        return f"""Eres un experto en marketing de afiliados. Genera una estrategia.

Producto:
- Titulo: {product_data.get('title', 'No disponible')}
- Descripcion: {product_data.get('description', 'No disponible')[:300]}
- Precio: {product_data.get('price', 'No disponible')}

Publico: {target_audience}
Plataforma: {platform}

Genera:
1. Analisis de 3 necesidades que resuelve este producto
2. 2 ideas de contenido con titular, copy y hashtags
3. 2 angulos de venta persuasivos"""

def history_view(request):
    """Vista del historial"""
    analyses = AnalysisHistory.objects.filter(success=True)[:10]
    return render(request, 'analyzer/history.html', {'analyses': analyses})
'''

with open('analyzer/views.py', 'w', encoding='utf-8') as f:
    f.write(views_content)
print("   ‚úÖ views.py recreado")

# analyzer/utils/scraping.py sin caracteres especiales
scraping_content = '''# analyzer/utils/scraping.py

import requests
from bs4 import BeautifulSoup
import re

def scrape_product_info(url):
    """Extrae informacion basica del producto"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        product_data = {
            'title': '',
            'description': '',
            'price': ''
        }
        
        # Buscar titulo
        title = soup.find('h1')
        if title:
            product_data['title'] = title.text.strip()
        else:
            meta_title = soup.find('meta', {'property': 'og:title'})
            if meta_title:
                product_data['title'] = meta_title.get('content', '')
        
        # Buscar precio
        price_pattern = r'\\$[\\d,]+\\.?\\d*'
        price_text = soup.find(text=re.compile(price_pattern))
        if price_text:
            match = re.search(price_pattern, price_text)
            if match:
                product_data['price'] = match.group()
        
        # Buscar descripcion
        meta_desc = soup.find('meta', {'name': 'description'})
        if meta_desc:
            product_data['description'] = meta_desc.get('content', '')
        
        # Valores por defecto
        if not product_data['title']:
            product_data['title'] = 'Titulo no encontrado'
        if not product_data['description']:
            product_data['description'] = 'Descripcion no disponible'
        if not product_data['price']:
            product_data['price'] = 'Precio no disponible'
        
        return {
            'success': True,
            'data': product_data
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }
'''

with open('analyzer/utils/scraping.py', 'w', encoding='utf-8') as f:
    f.write(scraping_content)
print("   ‚úÖ scraping.py recreado")

# analyzer/utils/ai_integration.py simplificado
ai_content = '''# analyzer/utils/ai_integration.py

import google.generativeai as genai

def generate_strategy(prompt, api_key):
    """Genera estrategia usando Gemini"""
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')
        
        response = model.generate_content(prompt)
        
        if response.text:
            return {
                'success': True,
                'response': response.text
            }
        else:
            return {
                'success': False,
                'error': 'No se pudo generar respuesta'
            }
            
    except Exception as e:
        error_msg = str(e)
        if 'API_KEY_INVALID' in error_msg:
            return {
                'success': False,
                'error': 'API key invalida'
            }
        return {
            'success': False,
            'error': error_msg
        }
'''

with open('analyzer/utils/ai_integration.py', 'w', encoding='utf-8') as f:
    f.write(ai_content)
print("   ‚úÖ ai_integration.py recreado")

# 5. Verificar que todo est√© correcto
print("\n5Ô∏è‚É£ Verificando archivos...")
required_files = [
    'config/settings.py',
    'config/urls.py',
    'analyzer/__init__.py',
    'analyzer/models.py',
    'analyzer/views.py',
    'analyzer/urls.py',
    'analyzer/utils/__init__.py',
    'analyzer/utils/scraping.py',
    'analyzer/utils/ai_integration.py',
    'analyzer/templates/analyzer/index.html'
]

all_good = True
for file_path in required_files:
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        print(f"   ‚úÖ {file_path}")
    else:
        print(f"   ‚ùå {file_path} - FALTA O VACIO")
        all_good = False

print("\n" + "="*50)
if all_good:
    print("‚ú® ¬°PROYECTO REPARADO EXITOSAMENTE!")
    print("\nAhora ejecuta estos comandos:")
    print("1. python manage.py makemigrations")
    print("2. python manage.py migrate")
    print("3. python manage.py runserver")
else:
    print("‚ö†Ô∏è  A√∫n hay archivos faltantes. Ejecuta setup_complete.py")